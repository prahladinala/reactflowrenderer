{"version":3,"sources":["components/node.components.jsx","App.js","reportWebVitals.js","index.js"],"names":["initialElements","id","type","data","label","position","x","y","onLoad","reactFlowInstance","fitView","MindNode","useState","elements","setElements","name","setName","style","width","height","onConnect","params","e","addEdge","connectionLineStyle","stroke","strokeWidth","connectionLineType","snapToGrid","snapGrid","color","gap","nodeColor","n","onChange","target","value","onClick","concat","length","toString","Math","random","window","innerWidth","innerHeight","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2MAKMA,EAAkB,CACpB,CAACC,GAAI,IAAKC,KAAM,QAASC,KAAK,CAACC,MAAO,aAAcC,SAAU,CAACC,EAAE,EAAEC,EAAE,KAEnEC,EAAS,SAACC,GACZA,EAAkBC,WAwDPC,EArDE,WAAO,IAAD,EAEaC,mBAASZ,GAFtB,mBAEZa,EAFY,KAEFC,EAFE,OAGKF,mBAAS,IAHd,mBAGZG,EAHY,KAGNC,EAHM,KAenB,OACI,eAAC,WAAD,WACI,eAAC,IAAD,CACAH,SAAUA,EACVL,OAAQA,EACRS,MAAO,CAACC,MAAM,OAAOC,OAAQ,QAC7BC,UARU,SAACC,GAAD,OAAYP,GAAY,SAAAQ,GAAC,OAAIC,YAAQF,EAAOC,OAStDE,oBAAqB,CAACC,OAAQ,OAAQC,YAAa,GACnDC,mBAAqB,SACrBC,YAAc,EACdC,SAAU,CAAC,GAAG,IARd,UAUI,cAAC,IAAD,CACAC,MAAM,OACNC,IAAK,KAGL,cAAC,IAAD,CACAC,UAAW,SAAAC,GACP,MAAc,UAAXA,EAAE/B,KAAyB,OACvB,aAEX,cAAC,IAAD,OAGJ,gCACI,uBAAOA,KAAK,OACZgC,SAAU,SAAAZ,GAAC,OAAIN,EAAQM,EAAEa,OAAOC,QAChCrB,KAAK,UACL,wBACAb,KAAK,SACLmC,QAzCI,WACZvB,GAAY,SAAAQ,GAAC,OAAIA,EAAEgB,OAAO,CACtBrC,IAAKqB,EAAEiB,OAAO,GAAGC,WACjBrC,KAAM,CAACC,MAAM,GAAD,OAAKW,IACjBV,SAAU,CAACC,EAAGmC,KAAKC,SAAWC,OAAOC,WAAYrC,EAAGkC,KAAKC,SAAWC,OAAOE,mBAmCvE,6BC7CDC,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCMSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.a88a8e8f.chunk.js","sourcesContent":["import React, {useState, Fragment} from 'react';\r\nimport '../App.css'\r\n\r\nimport ReactFlow, {addEdge, Background, Controls, MiniMap} from 'react-flow-renderer';\r\n\r\nconst initialElements = [\r\n    {id: '1', type: 'input', data:{label: 'Mind Node'}, position: {x:0,y:0}}\r\n]\r\nconst onLoad = (reactFlowInstance) =>  {\r\n    reactFlowInstance.fitView();\r\n}\r\n\r\nconst MindNode = () => {\r\n\r\n    const [elements, setElements] = useState(initialElements);\r\n    const [name, setName] = useState(\"\")\r\n    \r\n    const addNode = () => {\r\n        setElements(e => e.concat({\r\n            id: (e.length+1).toString(),\r\n            data: {label: `${name}`},\r\n            position: {x: Math.random() * window.innerWidth, y: Math.random() * window.innerHeight}\r\n        }));\r\n    };\r\n\r\n    const onConnect = (params) => setElements(e => addEdge(params,e));\r\n    \r\n    return(\r\n        <Fragment>\r\n            <ReactFlow\r\n            elements={elements}\r\n            onLoad={onLoad}\r\n            style={{width:'100%',height: '90vh'}}\r\n            onConnect = {onConnect}\r\n            connectionLineStyle={{stroke: \"#ddd\", strokeWidth: 4}}\r\n            connectionLineType = \"bezier\"\r\n            snapToGrid = {true}\r\n            snapGrid={[16,16]}\r\n            >\r\n                <Background\r\n                color=\"#888\"\r\n                gap={16}\r\n\r\n                />\r\n                <MiniMap \r\n                nodeColor={n=>{\r\n                    if(n.type === 'input') return 'blue';\r\n                    return '#FFCC00'\r\n                }} />\r\n                <Controls />\r\n                </ReactFlow>\r\n\r\n            <div>\r\n                <input type=\"text\"\r\n                onChange={e => setName(e.target.value)}\r\n                name=\"title\"/>\r\n                <button \r\n                type=\"button\"\r\n                onClick={addNode}\r\n                >Add Node</button>\r\n            </div>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\nexport default MindNode;","import './App.css'\nimport MindNode from './components/node.components'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <MindNode />\n    </div>\n  )\n}\n\nexport default App\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}